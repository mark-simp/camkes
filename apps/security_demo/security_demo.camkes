/*
 * Copyright 2022, Capgemini Engineering
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <PicoServer/PicoServer.camkes>;
import <TimeServer/TimeServer.camkes>;

import "components/Crypto/crypto.camkes";
import "components/KeyReader/key_reader.camkes";
import "components/Transmitter/transmitter.camkes";
import "components/EthDriverUboot/eth_driver_uboot.camkes";

#include <camkes-picotcp-base.h>

assembly {
    composition {
        /* List of all components */
        component Crypto crypto;
        component KeyReader key_reader;
        component Transmitter transmitter;
        component PicoServer picoserver;
        component EthDriverUboot ethdriver;
        component TimeServer time_server;

        /* KeyReader <-> Crypto connections */
        connection seL4RPCCall keypress(from key_reader.a, to crypto.b);

        /* Crypto <-> Transmitter connections */
        connection seL4SharedData buffer(from crypto.d, to transmitter.d);
        connection seL4RPCCall buffer_lock(from transmitter.l, to crypto.l);
        connection seL4Notification buffer_notify(from crypto.e, to transmitter.e);

        /* PicoServer <-> Transmitter connections */
        connection seL4PicoServerSignal eth_server_control(from transmitter.eth_control, to picoserver.pico_control);
        connection seL4PicoServer eth_server_recv(from transmitter.eth_recv, to picoserver.pico_recv);
        connection seL4PicoServer eth_server_send(from transmitter.eth_send, to picoserver.pico_send);

        /* PicoServer <-> Timerserver connections */
        picotcp_base_connections(picoserver, pico_base, time_server.the_timer)

        /* PicoServer <-> EthDriverUboot connections */
        connection seL4Ethdriver eth_driver_conn(from picoserver.ethdriver, to ethdriver.client);
    }

    configuration {
        /* KeyReader configuration */
        key_reader.dma_pool = 16 * 1024; /* DMA for USB driver */

        /* EthDriverUboot configuration */
        ethdriver.simple = true;
        ethdriver.cnode_size_bits = 12;
        ethdriver.simple_untyped20_pool = 2;
        ethdriver.heap_size = 0x200000;
        ethdriver.dma_pool = 0x40000;
        ethdriver.promiscuous_mode = 0;

        /* TimeServer configuration */
        time_server.timers_per_client = 8;

        /* Transmitter configuration */
        transmitter.eth_control_attributes = "1";
        transmitter.eth_recv_attributes = "1";
        transmitter.eth_recv_shmem_size = 0x1000;
        transmitter.eth_send_attributes = "1";
        transmitter.eth_send_shmem_size = 0x1000;
        transmitter.ip_addr = PICOSERVER_IP_ADDR;

        /* PicoServer configuration */
        picotcp_base_configuration(picoserver, pico_base, PICOSERVER_IP_ADDR, "0.0.0.0")
        picoserver.ethdriver_shmem_size = 0x1000;
        picoserver.heap_size = 0x40000;
    }
}
